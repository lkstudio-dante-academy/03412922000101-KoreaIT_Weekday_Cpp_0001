#pragma once

#include "../../Global/Define/KDefine+Global.h"

namespace E01Example
{
	/**
	* 위젯
	*/
	class CWidget_E09
	{
	public:			// public 함수

		/*
		* 생성자 (Constructor) 란?
		* - 생성 된 객체를 초기화하기 위해 호출 되는 특별한 함수를 의미한다. (+ 즉, 
		* 생성자를 활용하면 객체를 생성과 동시에 원하는 데이터로 초기화 하는 것이 가능하다.)
		* 
		* 생성자는 객체를 생성 할 때 C++ 컴파일러에 의해서 자동으로 호출 되며
		* C++ 은 객체가 생성 될 때 반드시 생성자가 호출 되어야한다. (+ 즉, 생성자가 
		* 호출 되지 않으면 객체 생성이 완료 되지 않았다는 것을 의미한다.)
		* 
		* 이는 C++ 클래스에는 사용자 (프로그래머) 가 정의 한 멤버 이외에도
		* 내부적으로 사용 되는 멤버들이 존재하며 해당 멤버를 초기화하기 위한 명령문이 생성자에
		* 추가 되기 때문이다.
		* 
		* 따라서 C++ 클래스는 반드시 생성자를 구현해야 되며 만약 생성자를 클래스에
		* 구현하지 않았을 경우 C++ 컴파일러에 의해서 자동으로 아무런 입력도 전달 받지 않는
		* 기본 생성자가 추가 된다. (+ 즉, 특정 클래스에 생성자가 존재 할 경우 C++ 컴파일러는
		* 더이상 기본 생성자를 추가하지 않는다는 것을 알 수 있다.)
		*/

		/** 생성자 */
		CWidget_E09(void);

		/** 생성자 */
		CWidget_E09(int a_nVal, float a_fVal);

		/*
		* 소멸자 (Destructor) 란?
		* - 객체가 사용 중인 자원을 정리하기 위해 호출 되는 특별한 함수를 의미한다. (+ 즉,
		* 소멸자를 활용하면 객체가 제거 될 때 객체가 사용 중인 메모리 등을 해제하는 것이 가능하다.)
		* 
		* 소멸자는 객체가 제거 될 때 C++ 컴파일러에 의해서 자동으로 호출 되며
		* 생성자와 마찬가지로 클래스에 소멸자가 존재하지 않을 경우 C++ 컴파일러에 의해서 자동으로
		* 기본 소멸자가 추가 된다.
		* 
		* 소멸자는 생성자와 달리 매개 변수가 존재 하지 않기 때문에 함수 오버로딩을 지원하지 않는다.
		* (+ 즉, 소멸자는 생성자 달리 함수 원형이 유일하다는 것을 의미한다.)
		*/

		/** 소멸자 */
		~CWidget_E09(void);

		/** 정보를 출력한다 */
		void ShowInfo(void);

	public:			// public 접근 함수

		/** 정수를 변경한다 */
		void SetVal_Int(int a_nVal);

		/** 실수를 변경한다 */
		void SetVal_Real(float a_fVal);

	private:			// private 변수

		int m_nVal = 0;
		float m_fVal = 0.0f;
	};
}
