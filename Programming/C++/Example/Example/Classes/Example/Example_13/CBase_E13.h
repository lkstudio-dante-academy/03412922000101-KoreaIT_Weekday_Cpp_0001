#pragma once

#include "../../Global/Define/KDefine+Global.h"

namespace E01Example
{
	/**
	* 부모 클래스
	*/
	class CBase_E13
	{
	public:			// public 함수

		/** 생성자 */
		CBase_E13(int a_nVal, float a_fVal);

		/*
		* 가상 소멸자 (Virtual Destructor) 란?
		* - 부모 클래스 포인터 (+ or 레퍼런스) 로 자식 클래스를 통해 생성 된 객체를
		* 참조하고 있는 상황에서 자식 클래스의 소멸자를 호출 할 수 있도록 하는 소멸자를 의미한다.
		* (+ 즉, 부모 클래스의 소멸자가 가상 소멸자 일 경우 함수 오버라이드에 의해 자식 클래스의
		* 소멸자가 호출 된다는 것을 의미한다.)
		*
		* C++ 은 다형성에 의해서 자식 클래스를 통해 생성 된 객체를 부모 클래스 포인터로
		* 참조하는 것이 가능하며 이때 부모 클래스 포인터로 참조하는 객체를 제거 할 경우
		* 자식 클래스의 소멸자가 호출 되지 않는 문제가 발생한다. (+ 즉, 메모리 릭이 발생 할
		* 가능성이 있다는 것을 알 수 있다.)
		*
		* 따라서 특정 클래스가 다른 클래스에 의해 상속 될 경우 해당 클래스의 소멸자를 반드시
		* 가상 소멸자로 정의해야한다. (+ 즉, 부모 클래스의 소멸자는 반드시 가상 소멸자로
		* 정의해야한다는 것을 의미한다.)
		*/

		/** 소멸자 */
		virtual ~CBase_E13(void);

		/** 정보를 출력한다 */
		void ShowInfo(void);

		/*
		* 가상 함수 (Virtual Function) 란?
		* - 동적 바인딩을 지원하는 함수를 의미한다. (+ 즉, 가상 함수는 호출 될 함수가 런타임에
		* 결정 된다는 것을 알 수 있다.)
		* 
		* 함수 동적 바인딩 (Function Dynamic Binding) 이란?
		* - 함수를 호출하는 명령문과 실제 호출 될 함수를 연결하는 작업을 프로그램이 실행 중에
		* 수행하는 것을 의미한다. (+ 즉, 반대로 함수 정적 바인딩은 컴파일 타임에 수행 된다는 것을
		* 알 수 있다.)
		* 
		* 가상 함수는 동적 바인딩을 지원하며 이에 따라 포인터가 참조하는 객체에 따라 호출 되는
		* 함수가 달라진다는 것을 알 수 있다.
		*/

		/** 정보를 출력한다 */
		virtual void ShowInfo_Virtual(void);

	private:			// private 변수

		int m_nVal = 0;
		float m_fVal = 0.0f;
	};
}
