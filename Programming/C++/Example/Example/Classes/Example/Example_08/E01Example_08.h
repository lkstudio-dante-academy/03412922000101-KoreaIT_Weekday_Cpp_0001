#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 클래스 (Class) 란?
* - 사용자 정의 자료형 중 하나로서 변수와 함수 등을 하나로 묶어서 관리 할 수 있는 기능을 의미한다.
* (+ 즉, 클래스를 활용하면 연관 된 변수와 함수를 하나의 그룹으로 관리하는 것이 가능하다.)
*
* C++ 객체 지향 프로그래밍 (Object Oriented Programming) 을 지원하며 객체 지향 프로그래밍의
* 핵심이 되는 사물 (객체) 을 클래스를 통해 정의하는 것이 가능하다. (+ 즉, 클래스는 사물을
* 정의 할 수 있는 수단이라는 것을 알 수 있다.)
*
* 프로그램은 데이터의 집합을 통해 사물을 표현하는 것이 가능하기 때문에 객체 지향 프로그래밍은
* 사물이 지닌 특징을 속성과 행위로 구분해서 표현한다.
*
* 속성은 사물을 표현 할 수 있는 데이터를 의미하며 행위는 사물이 할 수 있는 행동을 의미한다.
*
* 따라서 C++ 은 사물이 지니는 속성은 변수를 통해 표현하고 사물이 할 수 있는 행위는 함수를 통해
* 표현한다. (+ 즉, 클래스는 변수와 함수를 묶어서 관리 할 수 있는 기능이기 때문에 클래스를 활용하면
* 사물을 표현하는 것이 가능하다.)
*
* 객체 지향 프로그래밍 (Object Oriented Programming) 이란?
* - 프로그램의 구조를 설계하기 위한 설계 방식 중 하나로서 특정 역할을 수행하는 사물을 정의하고
* 사물과 사물 간에 상호 작용을 통해 프로그램이 동작하도록 하는 설계 방식을 의미한다. (+ 즉,
* 객체 지향 프로그래밍의 핵심은 사물이라는 것을 알 수 있다.)
*
* C++ 클래스 정의 방법
* - class + 클래스 이름 + 멤버 (+ 변수, 함수 등등...)
*
* Ex)
* class CSomeClass
* {
* public:
*
*		void SomeFunc(void)			<- 멤버 함수
*		{
*			// Do Something
*		}
*
* public:
*
*		int m_nVal = 0;				<- 멤버 변수
* };
*
* CSomeClass oSomeObj;
* oSomeObj.SomeFunc();
*
* 위와 같이 클래스를 정의하고 나면 해당 클래스를 통해 객체를 생성하는 것이 가능하다.
*
* 생성 된 객체 내부에는 클래스에서 정의 한 멤버가 존재하며 특정 멤버에 접근하고 싶다면
* . (멤버 지정 연산자) 를 사용하면 된다. (+ 즉, 멤버 지정 연산자를 활용하면 객채 내부에 존재하는
* 멤버를 제어하는 것이 가능하다.)
*
* C++ 은 다른 언어와 달리 스택 영역에 객체를 생성하는 것이 가능하며 new 키워드를 통해 객체를
* 힙 영역에 생성하는 것도 가능하다. (+ 즉, 스택 영역에 할당 된 객체는 스택의 규칙에 따라
* 메모리가 관리 되며 힙 영역에 할당 된 객체는 사용자에 의해 메모리가 관리 된다는 것을 알 수 있다.)
*/
namespace E01Example
{
	/** Example 8 */
	int E01Example_08(int argc, char* args[]);
}
