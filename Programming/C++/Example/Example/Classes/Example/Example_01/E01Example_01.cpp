#include "E01Example_01.h"

/*
* using 키워드란?
* - 네임 스페이스 하위에 정의 된 함수 등을 명시하는 역할을 수행하는 키워드를 의미한다. (+ 즉,
* using 키워드를 활용하면 네임 스페이스를 명시하지 않고 특정 네임 스페이스 하위에 있는 함수 등을
* 사용하는 것이 가능하다.)
* 
* Ex)
* using std::string;
* 
* string oStr = "";
* std::cin >> oStr;
* 
* 위와 같이 using 키워드를 활용하면 네임 스페이스를 생략하고 특정 네임 스페이스 하위에 정의 된
* 함수 등을 사용하는 것이 가능하다.
* 
* 또한 using namespace std 와 같이 네임 스페이스 전체를 using 키워드로 명시하면
* 해당 네임 스페이스 하위에 있는 모든 기능 (+ Ex. 변수, 함수 등등...) 을
* 네임 스페이스를 명시하지 않고 사용하는 것이 가능하다.
* 
* 단, 네임 스페이스 전체를 using 키워드로 명시 할 경우 이름 충돌이 발생 할 가능성이 있기 때문에
* 주의가 필요하다.
*/
using namespace std;

namespace E01Example
{
	int E01Example_01(int argc, char* args[])
	{
		/*
		* cout 이란?
		* - 콘솔 창에 데이터를 출력 할 수 있는 여러 기능을 제공하는 객체를 의미한다. (+ 즉,
		* cout 객체를 활용하면 문자열과 같은 데이터를 콘솔 창에 출력하는 것이 가능하다.)
		* 
		* cout 객체를 통해 콘솔 창에 데이터를 출력하고 싶다면 << 연산자를 사용하는 것이
		* 일반적이다. (+ 즉, << 연산자를 활용하면 특정 데이터를 콘솔 창에 출력하는 것이 가능하다.)
		* 
		* Ex)
		* int nVal = 10;
		* float fVal = 3.14f;
		* 
		* std::cout << nVal << ", " << fVal << std::endl;			<- "10, 3.14" 출력
		* 
		* 위와 같이 << 연산자를 활용하면 콘솔 창에 데이터를 출력하는 것이 가능하며 필요에 따라
		* 연속으로 사용하는 것이 가능하다. (+ 즉, << 연산자를 연속으로 사용 할 경우 순차적으로
		* 데이터가 콘솔 창에 출력 된다는 것을 알 수 있다.)
		* 
		* endl 함수란?
		* - 콘솔 창에 개행 문자를 출력하는 역할을 수행하는 함수를 의미한다. (+ 즉,
		* endl 함수를 활용하면 개행 문자를 출력함으로서 여러 라인에 데이터를 출력하는 것이
		* 가능하다.)
		* 
		* string 클래스란?
		* - 문자열 데이터를 처리 할 수 있는 여러 기능을 제공하는 클래스를 의미한다. (+ 즉,
		* string 클래스를 활용하면 문자열을 좀 더 쉽게 제어하는 것이 가능하다.)
		* 
		* C/C++ 은 문자열을 표현하기 위한 별도의 자료형이 존재하지 않기 때문에 배열을 통해서
		* 문자열을 표현하지만 C++ 은 string 클래스를 제공함으로서 C 보다 좀 더 쉽게 문자열을
		* 제어하는 것이 가능하다. (+ 즉, string 클래스는 내부적으로 배열을 통해 문자열을
		* 제어한다는 것을 알 수 있다.)
		* 
		* std 네임 스페이스란?
		* - C++ 에서 제공하는 모든 표준 라이브러리가 정의 되어있는 네임 스페이스를 의미한다.
		*/
		std::cout << "Hello, World!" << std::endl;
		std::string oStr = "";

		/*
		* cin 이란?
		* - 콘솔 창으로부터 데이터를 읽어들이는 여러 기능을 제공하는 객체를 의미한다. (+ 즉,
		* cin 객체를 활용하면 콘솔 창으로부터 데이터를 읽어들임으로서 사용자와 상호 작용하는 것이
		* 가능하다.)
		* 
		* getline 함수란?
		* - 공백이 있는 문자열을 콘솔 창으로부터 읽어들이는 역할을 수행하는 함수를 의미한다. (+ 즉,
		* cin 객체는 일반적인 방법으로 공백이 있는 문자열을 읽어들이는 것이 불가능하다.)
		* 
		* cin 객체는 기본적으로 공백을 기준으로 읽어들일 데이터를 구분하기 때문에 문자열에
		* 공백이 존재 할 경우 해당 문자열을 하나의 문자열이 아니라 여러 문자열로 인식한다.
		* 
		* 따라서 공백이 존재하는 문자열을 콘솔 창으로부터 읽어들이고 싶다면
		* getline 과 같은 함수를 활용해야한다.
		* 
		* Ex)
		* std::string oStr = "";
		* std::cin >> oStr;
		* 
		* 위와 같이 cin 객체를 통해 콘솔 창으로부터 데이터를 읽어들이는 일반적인 방법은
		* >> 연산자를 활용하는 것이다. (+ 즉, >> 연산자를 활용하면 콘솔 창으로부터 읽어들인
		* 데이터를 특정 변수에 할당하는 것이 가능하다.)
		*/
		std::cout << "\n문자열 입력 : ";
		std::getline(std::cin, oStr);

		std::cout << "입력 된 문자열 : " << oStr << std::endl;
		return 0;
	}
}
