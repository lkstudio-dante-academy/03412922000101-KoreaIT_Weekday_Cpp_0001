#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 복사 생성자 (Copy Constructor) 란?
* - 객체를 복사하기 위해 호출 되는 생성자를 의미한다. (+ 즉, 복사 생성자를 활용하면 사본 객체를
* 생성하는 것이 가능하다.)
*
* 복사 생성자는 생성자와 마찬가지로 클래스 내부에 존재하지 않을 경우 C++ 컴파일러에 의해서
* 자동으로 추가 된다.
*
* 단, C++ 컴파일러가 자동으로 추가해주는 복사 생성자는 내부적으로 얕은 복사를 수행하기 때문에
* 얕은 복사가 문제가 될 경우 반드시 복사 생성자를 직접 정의해서 깊은 복사를 수행해야한다.
*
* Ex)
* class CSomeClass
* {
* public:
*
*		CSomeClass(void)
*		{
*			m_pnVal = new int(0);
*		}
*
*		~CSomeClass(void)
*		{
*			delete m_pnVal;
*		}
*
* private:
*
*		int* m_pnVal = nullptr;
* };
*
* 위와 같이 소멸자는 객체가 사용하고 있던 리소스를 해제하기 위한 용도로 사용되기 때문에 얕은 복사가
* 수행 될 경우 소멸자가 호출 되는 과정에서 문제가 발생한다. (+ 즉, 위의 경우 이미 해제 된 메모리를
* 다시 해제하는 문제가 발생한다.)
*
* 이동 생성자 (Move Constructor) 란?
* - 객체가 지니고 있는 멤버를 이동하기 위해 호출 되는 생성자를 의미한다. (+ 즉,
* 이동 생성자를 활용하면 객체가 지니고 있는 멤버를 다른 객체에 이동 시키는 것이 가능하다.)
*
* 이동 생성자는 다른 생성자와 달리 C++ 컴파일러가 추가해주지 않는다. (+ 즉,
* 이동 생성자가 필요하다면 사용자가 직접 정의해야한다는 것을 의미한다.)
*
* 따라서 클래스에 이동 생성자가 존재하지 않을 경우 복사 생성자에 의해 복사 매커니즘이
* 동작하기 때문에 복사 생성자가 비효율적일 경우 이동 생성자를 구현해서 이동 매커니즘을 구현하는 것을
* 추천한다.
*/
namespace E01Example
{
	/** Example 10 */
	int E01Example_10(int argc, char* args[]);
}
