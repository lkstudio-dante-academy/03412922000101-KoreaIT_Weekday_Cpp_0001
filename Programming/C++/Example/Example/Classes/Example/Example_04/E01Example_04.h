#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* auto 키워드란?
* - 자료형을 명시하지 않고 지역 변수를 선언 할 수 있는 키워드를 의미한다. (+ 즉,
* auto 키워드를 활용하면 이름이 긴 자료형의 변수를 좀 더 쉽게 선언하는 것이 가능하다.)
*
* C 와 C++ 11 미만 버전에서 auto 키워드는 지역 변수를 의미하는 키워드였지만 C++ 11 버전 이상부터는
* 다른 의미로 활용 된다.
*
* Ex)
* auto nVal = 10;
* auto pnVal = &nVal;
*
* 위와 같이 auto 키워드를 활용하면 자료형을 생략하고 변수를 선언하는 것이 가능하다.
*
* 단, C++ 은 강력 형식 언어 (Strong Type Language) 이기 때문에 변수를 선언하기 위해서는 반드시
* 자료형을 명시해야한다.
*
* 따라서 auto 키워드는 컴파일 과정에서 C++ 컴파일러에 의해 실제 자료형으로 변경 되며
* C++ 컴파일러는 auto 키워드를 실제 자료형으로 변환 하기 위해 초기화 데이터를 요구한다. (+ 즉,
* auto 키워드로 선언 된 변수에 할당 할 초기화 데이터를 기반으로 변수의 자료형을 유추한다는 것을
* 알 수 있다.)
*
* 범위 기반 for (Range Based For) 문이란?
* - 반복자 인터페이스를 지원하는 데이터를 대상으로 사용 가능한 반복문을 의미한다. (+ 즉,
* 범위 기반 for 문은 단독으로 사용하는 것이 불가능하다.)
*
* 범위 기반 for 문은 순회문이라고 불리며 반복 가능한 데이터의 모든 요소를 순회 할 때 사용 된다.
*
* Ex)
* int anValues[5] =
* {
*		1, 2, 3, 4, 5
* };
*
* for(int nVal : anValues)
* {
*		// Do Something
* }
*
* 위와 같이 범위 기반 for 문은 반복을 할 때 마다 반복 가능한 데이터의 요소를 가져와서 nVal 변수에
* 할당한다. (+ 즉, 배열은 반복 가능한 데이터라는 것을 알 수 있다.)
*
* 범위 기반 for 문은 반복을 종료하기 위한 조건을 사용자 (프로그래머) 가 직접 작성하지 않기 때문에
* 원치 않게 무한 루프를 작성하는 실수를 줄이는 것이 가능하다. (+ 즉, 범위 기반 for 문은
* 반복 가능한 데이터에서 모든 요소를 가져 올 경우 자동으로 반복이 종료 된다는 것을 알 수 있다.)
*/
namespace E01Example
{
	/** Example 4 */
	int E01Example_04(int argc, char* args[]);
}
