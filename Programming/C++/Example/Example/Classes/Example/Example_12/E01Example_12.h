#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 객체 지향 프로그래밍 4 대 요소
* - 캡슐화 (+ or 정보 은닉)
* - 상속
* - 다형성
* - 추상화
*
* 캡슐화 (+ or 정보 은닉) 란
* - 객체가 지니고 있는 멤버를 외부로부터 안전하게 보호하는 개념을 의미한다. (+ 즉, 캡슐화는
* 민감한 데이터를 지니고 있는 멤버를 외부로부터 보호함으로서 객체를 안전하게 사용하는
* 개념이라는 것을 알 수 있다.)
*
* C++ 접근 제어 지시자 (or 한정자) 를 지원하며 해당 기능을 통해 캡슐화 개념을 구현하는 것이
* 가능하다.
*
* 상속이란?
* - 클래스 간에 부모/자식 관계를 형성 할 수 있는 개념을 의미한다. (+ 즉, 상속을 활용하면
* 클래스 간에 상/하 관계가 형성 된다는 것을 알 수 있다.)
*
* 클래스가 상속 관계를 형성하면 자식 클래스는 부모 클래스에 정의 된 멤버를 사용하는 것이 가능하다.
* (+ 즉, 자식 클래스를 통해 생성 된 객체 내부에는 부모 클래스에 정의 된 멤버도 존재한다는 것을
* 의미한다.)
*
* C++ 클래스 상속 방법
* - 자식 클래스 + 접근 제어 지시자 + 부모 클래스
*
* Ex)
* class CBase
* {
* public:
*
*		void SomeFunc(void)
*		{
*			// Do Something
*		}
* };
*
* class CDerived : public CBase
* {
*		// Do Something
* };
*
* CDerived oSomeObj;
* oSomeObj.ShowInfo();
*
* 위와 같이 클래스가 상속 관계를 형성하면 자식 클래스는 부모 클래스에 정의 된 멤버에 접근하는 것이
* 가능하다.
*
* 또한 자식 클래스는 부모 클래스를 상속 할 때 접근 제어 지시자를 명시함으로서 상속 받은 멤버의
* 최소 접근 수준를 보정하는 것이 가능하다. (+ 즉, 접근 제어 지시자를 private 수준으로 명시 할 경우
* 부모 클래스에 정의 된 모든 멤버를 private 수준으로 상속한다는 것을 알 수 있다.)
*/
namespace E01Example
{
	/** Example 12 */
	int E01Example_12(int argc, char* args[]);
}
